{"ast":null,"code":"// Simple logging middleware for client-side logging requirements.\n// Stores logs in localStorage under 'app_logs' and prints to console.\n// Each log: { time, level, action, details }\nexport function log(level, action, details) {\n  try {\n    var _console$level$toLowe, _console, _level$toLowerCase;\n    const entry = {\n      time: new Date().toISOString(),\n      level,\n      action,\n      details\n    };\n    (_console$level$toLowe = (_console = console)[level === null || level === void 0 ? void 0 : (_level$toLowerCase = level.toLowerCase) === null || _level$toLowerCase === void 0 ? void 0 : _level$toLowerCase.call(level)]) === null || _console$level$toLowe === void 0 ? void 0 : _console$level$toLowe.call(_console, \"[LOG]\", entry);\n    const arr = JSON.parse(localStorage.getItem('app_logs') || '[]');\n    arr.unshift(entry);\n    localStorage.setItem('app_logs', JSON.stringify(arr.slice(0, 500))); // keep recent 500\n  } catch (e) {\n    console.error('Logging failed', e);\n  }\n}\nexport function getLogs(limit = 100) {\n  return JSON.parse(localStorage.getItem('app_logs') || '[]').slice(0, limit);\n}","map":{"version":3,"names":["log","level","action","details","_console$level$toLowe","_console","_level$toLowerCase","entry","time","Date","toISOString","console","toLowerCase","call","arr","JSON","parse","localStorage","getItem","unshift","setItem","stringify","slice","e","error","getLogs","limit"],"sources":["C:/Users/ny071/Desktop/react-url-shortener-cra/src/LoggingMiddleware.js"],"sourcesContent":["// Simple logging middleware for client-side logging requirements.\n// Stores logs in localStorage under 'app_logs' and prints to console.\n// Each log: { time, level, action, details }\nexport function log(level, action, details) {\n  try {\n    const entry = { time: new Date().toISOString(), level, action, details };\n    console[level?.toLowerCase?.()]?.(\"[LOG]\", entry);\n    const arr = JSON.parse(localStorage.getItem('app_logs') || '[]');\n    arr.unshift(entry);\n    localStorage.setItem('app_logs', JSON.stringify(arr.slice(0, 500))); // keep recent 500\n  } catch (e) {\n    console.error('Logging failed', e);\n  }\n}\n\nexport function getLogs(limit=100) {\n  return JSON.parse(localStorage.getItem('app_logs') || '[]').slice(0, limit);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,SAASA,GAAGA,CAACC,KAAK,EAAEC,MAAM,EAAEC,OAAO,EAAE;EAC1C,IAAI;IAAA,IAAAC,qBAAA,EAAAC,QAAA,EAAAC,kBAAA;IACF,MAAMC,KAAK,GAAG;MAAEC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAAET,KAAK;MAAEC,MAAM;MAAEC;IAAQ,CAAC;IACxE,CAAAC,qBAAA,IAAAC,QAAA,GAAAM,OAAO,EAACV,KAAK,aAALA,KAAK,wBAAAK,kBAAA,GAALL,KAAK,CAAEW,WAAW,cAAAN,kBAAA,uBAAlBA,kBAAA,CAAAO,IAAA,CAAAZ,KAAqB,CAAC,CAAC,cAAAG,qBAAA,uBAA/BA,qBAAA,CAAAS,IAAA,CAAAR,QAAA,EAAkC,OAAO,EAAEE,KAAK,CAAC;IACjD,MAAMO,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC;IAChEJ,GAAG,CAACK,OAAO,CAACZ,KAAK,CAAC;IAClBU,YAAY,CAACG,OAAO,CAAC,UAAU,EAAEL,IAAI,CAACM,SAAS,CAACP,GAAG,CAACQ,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACvE,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVZ,OAAO,CAACa,KAAK,CAAC,gBAAgB,EAAED,CAAC,CAAC;EACpC;AACF;AAEA,OAAO,SAASE,OAAOA,CAACC,KAAK,GAAC,GAAG,EAAE;EACjC,OAAOX,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,CAACI,KAAK,CAAC,CAAC,EAAEI,KAAK,CAAC;AAC7E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}